{"version":3,"sources":["square.js","board.js","util.js","index.js"],"names":["Square","square_class","winning_move","this","props","winningMove","id","x","y","z","className","onClick","value","Component","Board","i","square","buttons","map","item","idx","renderButton","getWinner","squares","winner_line","length","winner","line","Game","state","history","Array","fill","rowcol","move_number","nextPlayer","isAscending","ROW_COUNT","console","log","slice","square_copy","next","col","row","Math","floor","setState","concat","move","history_arr","reverse","move_num","move_no","goto_text","button_class","button_text","r","c","rowcol_desc","gotoMove","current","status","total_squares","move_history","renderHistoryButtons","handleClick","toggleMoveOrder","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7bba377c.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass Square extends Component {\r\n    render() {\r\n        let square_class = \"square\";\r\n        const winning_move = this.props.winningMove;\r\n        const id = this.props.id;\r\n        if(winning_move !== null) {\r\n            const [x, y, z] = winning_move;\r\n            if(id === x || id === y || id === z) {\r\n                square_class = \"square winner\";\r\n            }\r\n        }\r\n        return (\r\n            <button className={square_class} \r\n                onClick={()=> this.props.onClick()}>\r\n            {this.props.value}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Square","import React, {Component} from 'react'\r\nimport Square from './square'\r\n\r\nclass Board extends Component {\r\n\r\n    renderButton(i) {\r\n        return <Square key={i} id = {i} \r\n            winningMove={this.props.winningMove}\r\n            onClick={()=> this.props.onClick(i)} \r\n            value={this.props.square[i]} />\r\n    }\r\n\r\n    render() {\r\n        const buttons = this.props.square.map((item, idx) => {\r\n            return (this.renderButton(idx));\r\n        });\r\n        return (    \r\n            <div className=\"board\">\r\n                <div className=\"board-row\">\r\n                    {buttons}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board","function getWinner(squares) {\r\n    const winner_line = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ]\r\n\r\n    for(let i = 0; i < winner_line.length; i++) {\r\n        const [x, y, z] = winner_line[i]\r\n        if(squares[x] && squares[x] === squares[y] \r\n            && squares[y] === squares[z]) {\r\n                return ({\r\n                    winner: squares[x],\r\n                    line: winner_line[i],\r\n                })\r\n            }\r\n    }\r\n\r\n    return ({\r\n        winner: null,\r\n        line: null,\r\n    });\r\n}\r\n\r\nexport default getWinner","import React, {Component} from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport Board from './board'\r\nimport getWinner from './util'\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [\r\n                {\r\n                    square: Array(9).fill(null),\r\n                    rowcol: [null, null],\r\n                }\r\n            ],\r\n            move_number: 0,\r\n            nextPlayer: 'X',\r\n            isAscending: true,\r\n        }\r\n\r\n        this.ROW_COUNT = 3;\r\n    }\r\n\r\n    handleClick(id) {  \r\n        console.log(id);\r\n        const history = this.state.history.slice(0, \r\n            this.state.move_number + 1);\r\n        const current = history[history.length - 1]\r\n        const square_copy = current.square.slice();\r\n        const {winner} = getWinner(square_copy);\r\n        if(square_copy[id] !== null || winner !== null) {\r\n            return;\r\n        }\r\n        const next = (this.state.nextPlayer === 'X') ? 'O' : 'X';\r\n        \r\n        square_copy[id] = this.state.nextPlayer;\r\n    \r\n        const col = (id % this.ROW_COUNT) + 1\r\n        const row = Math.floor(id / this.ROW_COUNT) + 1\r\n        this.setState({\r\n            history: history.concat({\r\n                square: square_copy, \r\n                rowcol: [row, col],\r\n            }),\r\n            nextPlayer: next,\r\n            move_number: history.length,\r\n        });    \r\n    }\r\n\r\n    toggleMoveOrder() {\r\n        this.setState({\r\n            isAscending: !this.state.isAscending,\r\n        })\r\n    }\r\n\r\n\r\n    gotoMove(move) {\r\n        console.log(move);\r\n        this.setState({\r\n            move_number:  move,\r\n            nextPlayer: ((move % 2 === 0)? 'X':'O' ),\r\n        })\r\n    }\r\n\r\n    renderHistoryButtons(history) {\r\n        const history_arr = (this.state.isAscending) ? history : \r\n            history.slice().reverse();\r\n        const move_history = history_arr.map((move, move_num) => {\r\n            \r\n            const move_no = (this.state.isAscending) ? move_num :\r\n                (history_arr.length - move_num -1);\r\n           \r\n            let goto_text = \"Goto \";\r\n            let button_class = \"move-button\"\r\n            if (move_no === this.state.move_number) {\r\n                goto_text = \"\";\r\n                button_class = \"move-button active-move\";\r\n            }\r\n            let button_text = goto_text + ((move_no === 0) ? \r\n                \"Beginning\" : \"Move #\" + move_no);\r\n            \r\n            const [r, c] = move.rowcol;\r\n            const rowcol_desc = (r !== null) ? \r\n                \"[Row: \" + r +\" Col: \" + c +\"]\" : \"\";\r\n            return (\r\n                <li className=\"move-list\" key={move_no}>\r\n                    <div className=\"move-bottom-container\">\r\n                    <button className={button_class} \r\n                    onClick={() => this.gotoMove(move_no)}>\r\n                    {button_text}\r\n                    </button>\r\n                    </div>\r\n                    <div className=\"rowcol\">{rowcol_desc}</div>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return move_history;\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.move_number];\r\n        let status = (<ul className=\"game-status\"><li>Next Player:   \r\n            {(this.state.nextPlayer === 'X') ? ' X' : ' O'}</li></ul>);\r\n\r\n        const total_squares = current.square.length;\r\n        const {winner, line} = getWinner(current.square);\r\n        if(winner != null) {\r\n            status = (<div className=\"game-status winner\">\r\n                        WINNER: Player {winner}</div>);\r\n        }\r\n        else if(this.state.move_number === total_squares) {\r\n            status = (<div className=\"game-status draw\">\r\n                        GAME DRAW</div>);\r\n        }\r\n\r\n        const move_history = this.renderHistoryButtons(history);\r\n        \r\n        return (\r\n            <div className=\"game-container\">\r\n            <div className=\"game-row\">\r\n                <h2 className=\"game-title\">Tic-Tac-Toe</h2>\r\n                <Board square = {current.square} winningMove={line}\r\n                    onClick={(i) => this.handleClick(i)}/>\r\n                <div>{status}</div>\r\n            </div>\r\n            <div className=\"game-row history-pane\">\r\n                <h4 className=\"move-history\">Move History</h4>\r\n                <ol className=\"history-container\">\r\n                    {move_history}\r\n                </ol>\r\n                <div> \r\n                    <button className=\"toggle-button\" \r\n                        onClick={() => this.toggleMoveOrder()}>\r\n                        Toggle Move Order\r\n                    </button> \r\n                </div>\r\n            </div>\r\n            <div className=\"game-row dummy\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));"],"sourceRoot":""}